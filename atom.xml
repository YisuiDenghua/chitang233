<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chi_Tang&#39;s Blog</title>
  
  <subtitle>池塘的博客</subtitle>
  <link href="https://chitang.tech/atom.xml" rel="self"/>
  
  <link href="https://chitang.tech/"/>
  <updated>2022-06-18T03:21:26.591Z</updated>
  <id>https://chitang.tech/</id>
  
  <author>
    <name>Chi_Tang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 Hexo 与 Vercel 零成本打造你的个人博客</title>
    <link href="https://chitang.tech/posts/hexo-vercel-blog/"/>
    <id>https://chitang.tech/posts/hexo-vercel-blog/</id>
    <published>2022-06-12T09:42:09.000Z</published>
    <updated>2022-06-18T03:21:26.591Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="在开始前，你需要知道的"><a href="#在开始前，你需要知道的" class="headerlink" title="在开始前，你需要知道的"></a>在开始前，你需要知道的</h2><p>本文简述了使用 Hexo 搭建个人博客的过程</p><p>但手上没有机器，电脑又不支持 Hackintosh，故该教程的内容对于 macOS 不一定适用</p><p>在阅读本文前，你需要准备的有:</p><ul><li>一台电脑</li><li>能够访问 GitHub 的网络环境</li><li>一个 Vercel 帐号</li><li>一个 GitHub 帐号</li><li>一段时间</li><li>一双灵活的手</li><li>初中的英语水平或熟练使用翻译工具</li></ul><p>文章包括且不限于:</p><ul><li>域名的购买与解析</li><li>Node.js 及 npm 的配置</li><li>Hexo 的安装与配置</li><li>Vercel 的使用</li></ul><p>同样地，在左侧有文章的目录，可以自行选择观看，我们开始吧</p><h2 id="Node-js-amp-npm"><a href="#Node-js-amp-npm" class="headerlink" title="Node.js &amp; npm"></a>Node.js &amp; npm</h2><p>对于 Windows，前往 <a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a> 下载 64-bit 的 msi 安装包</p><p>对于 Ubuntu，执行以下指令</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -fsSL https://deb.nodesource.com/setup_16.x <span class="token operator">|</span> <span class="token function">sudo</span> -E <span class="token function">bash</span> -<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> -y nodejs <span class="token function">npm</span></code></pre><p>对于 Debian，使用 root 用户执行以下指令</p><pre class="language-none"><code class="language-none">curl -fsSL https:&#x2F;&#x2F;deb.nodesource.com&#x2F;setup_16.x | bash -apt-get install -y nodejs npm</code></pre><p>对于 Arch Linux，可以直接使用 pacman 安装 <code>community/nodejs-lts-gallium</code> 和 <code>community/npm</code></p><p>其他发行版请自行前往 <a href="https://nodejs.org/zh-cn/download/package-manager/">https://nodejs.org/zh-cn/download/package-manager/</a> 查看</p><p>在安装后，打开终端执行 <code>node -v</code> 与 <code>npm -v</code>，没有报错即为安装成功</p><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先，执行以下命令来安装 Hexo 本体</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-cli -g</code></pre><div class="info"><blockquote><p>如果使用 Linux，可能会有权限不足的报错，在命令前方加入 <code>sudo</code> 使用 root 权限执行即可</p></blockquote></div><p>在你的硬盘中建立一个文件夹，这个文件夹在下面的部分会被叫做<strong>工作目录</strong></p><p>使用这条命令初始化 Hexo</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo init</code></pre><p>之后，使用这几条命令运行一个本地服务器</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo ghexo s</code></pre><p>没有意外的话，使用浏览器打开 <a href="http://localhost:4000/">http://localhost:4000</a> 就能够看到 Hexo 的默认首页了</p><p><img src="/images/hexo-vercel-blog/hexo-default.png" alt="Hexo 默认首页" loading="lazy"></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在工作目录下，能够看到新生成的 <code>_config.json</code>，这是 Hexo 的配置文件</p><h4 id="Site"><a href="#Site" class="headerlink" title="Site"></a>Site</h4><p>这是 Hexo 的站点配置，其中包括站点名称、描述、作者、语言、时区等</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Site</span><span class="token key atrule">title</span><span class="token punctuation">:</span> Hexo <span class="token comment"># 博客标题</span><span class="token key atrule">subtitle</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token comment"># 博客副标题</span><span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">''</span> <span class="token comment"># 博客描述</span><span class="token key atrule">keywords</span><span class="token punctuation">:</span> <span class="token comment"># 博客关键字(用于 SEO，部分主题可能不支持)</span><span class="token key atrule">author</span><span class="token punctuation">:</span> John Doe  <span class="token comment"># 作者</span><span class="token key atrule">language</span><span class="token punctuation">:</span> en  <span class="token comment"># 语言</span><span class="token key atrule">timezone</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token comment"># 时区</span></code></pre><p>作为参考，这是本站的配置</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Site</span><span class="token key atrule">title</span><span class="token punctuation">:</span> Chi_Tang's Blog<span class="token key atrule">subtitle</span><span class="token punctuation">:</span> <span class="token string">'池塘的博客'</span><span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">'只是一个普通的初中生罢了'</span><span class="token key atrule">keywords</span><span class="token punctuation">:</span><span class="token key atrule">author</span><span class="token punctuation">:</span> Chi_Tang<span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN<span class="token key atrule">timezone</span><span class="token punctuation">:</span> <span class="token string">'Asia/Shanghai'</span></code></pre><h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><p>这是 Hexo 的 URL 配置，其中包括博客的域名、链接各式等</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># URL</span><span class="token comment">## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'</span><span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//example.com <span class="token comment"># 博客 URL</span><span class="token key atrule">permalink</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>year/<span class="token punctuation">:</span>month/<span class="token punctuation">:</span>day/<span class="token punctuation">:</span>title/  <span class="token comment"># 文章链接格式</span><span class="token key atrule">permalink_defaults</span><span class="token punctuation">:</span><span class="token key atrule">pretty_urls</span><span class="token punctuation">:</span>  <span class="token key atrule">trailing_index</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># Set to false to remove trailing 'index.html' from permalinks</span>  <span class="token key atrule">trailing_html</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># Set to false to remove trailing '.html' from permalinks</span></code></pre><p>同样，这是本站的配置</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># URL</span><span class="token comment">## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'</span><span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//chitang.tech<span class="token key atrule">permalink</span><span class="token punctuation">:</span> posts/<span class="token punctuation">:</span>title/<span class="token key atrule">permalink_defaults</span><span class="token punctuation">:</span><span class="token key atrule">pretty_urls</span><span class="token punctuation">:</span>  <span class="token key atrule">trailing_index</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># Set to false to remove trailing 'index.html' from permalinks</span>  <span class="token key atrule">trailing_html</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># Set to false to remove trailing '.html' from permalinks</span></code></pre><h4 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h4><p>这是 Hexo 的扩展配置，其中包括插件、主题、外部插件等</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Extensions</span><span class="token comment">## Plugins: https://hexo.io/plugins/</span><span class="token comment">## Themes: https://hexo.io/themes/</span><span class="token key atrule">theme</span><span class="token punctuation">:</span> landscape</code></pre><p>这两个链接分别是 Hexo 的插件和主题链接，可自行查看及安装</p><p>主题和插件一般都会有自己的文档，本文不再提供详细的配置方式</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>首先，安装 <a href="https://github.com/cli/cli#installation">GitHub CLI</a> 和 <a href="https://git-scm.com/downloads">Git</a></p><p>在终端中执行</p><pre class="language-bash" data-language="bash"><code class="language-bash">gh auth login</code></pre><p>来登录到 GitHub</p><p>然后，在工作目录下执行</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit -m <span class="token string">"Initial commit"</span>gh repo create</code></pre><p>根据提示，创建一个新的 GitHub 仓库并将你的 Hexo 源文件上传到该仓库(可以选择 Private)</p><p>在 <a href="https://vercel.com/account/login-connections">https://vercel.com/account/login-connections</a> 连接你的 GitHub 账户后，前往 <a href="https://vercel.com/new">https://vercel.com/new</a> 导入你的 Hexo 仓库</p><p><img src="/images/hexo-vercel-blog/vercel-add.png" alt="添加项目" loading="lazy"></p><p>如果没有正确识别出框架的话，在 <strong>FRAMEWORK PRESENT</strong> 中手动选择 <strong>Hexo</strong></p><p>没有其他问题的话，点击 <strong>Deploy</strong> 即可</p><p>之后，在 <a href="https://vercel.com/">https://vercel.com</a> 里点击你的项目，就能够 <strong>Visit</strong> 你的博客了</p><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3><h4 id="Vercel"><a href="#Vercel" class="headerlink" title="Vercel"></a>Vercel</h4><p><img src="/images/hexo-vercel-blog/vercel-app-domain.png" alt=".vercel.app 域名" loading="lazy"></p><p>在 Vercel 项目设置中可以自行添加 <code>.vercel.app</code> 结尾的免费二级域名</p><h4 id="免费"><a href="#免费" class="headerlink" title="免费"></a>免费</h4><p><a href="https://www.freenom.com/zh">Freenom</a> 和 <a href="https://nic.eu.org/">nic.eu.org</a> 可以申请到免费的域名，申请过程网上已经烂大街了，本文中不再赘述</p><p>但需要注意的是，Freenom 域名因为滥用严重，无法使用 Cloudflare 的 API，同时也可能遭到部分广告屏蔽列表屏蔽</p><p>而 nic.eu.org 的域名有报告说 HTTP 协议会被阻断（不过不用担心，Vercel 可以自动配置 SSL 证书）</p><h4 id="付费"><a href="#付费" class="headerlink" title="付费"></a>付费</h4><p>购买域名十分简单，在网上搜索域名注册商，找到心仪的域名和价格进行付费即可</p><p>如果您愿意支持我的话，可以通过<a href="https://www.namesilo.com/?rid=e858391zj">此链接</a>注册 namesilo 并购买域名，我能够从中获取一些佣金以支持域名费用</p><p>但如果后续考虑绑定国内服务器，我会推荐你从国内的注册商购买，备案会方便些</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>关于域名解析，我只推荐使用 <a href="https://cloudflare.com/">Cloudflare</a>（不是别的不好，是没用过（逃</p><p>前往 <a href="https://dash.cloudflare.com/">https://dash.cloudflare.com</a> 注册并登录帐号</p><p>在仪表盘中点击<strong>添加站点</strong></p><p><img src="/images/hexo-vercel-blog/cf-add-website.png" alt="添加站点" loading="lazy"></p><p>在里面输入你注册的域名，如果出现 <code>your.domain is not a registered domain</code> 的提示建议等待半小时左右再试</p><p>计划选择 Free 足够</p><p><img src="/images/hexo-vercel-blog/cf-plan.png" alt="计划选择" loading="lazy"></p><p>在下一页的 DNS 记录中，可能会有注册商自带的一些记录，我的推荐是全部删除</p><p><img src="/images/hexo-vercel-blog/cf-dns.jpg" alt="DNS 记录" loading="lazy"></p><p>弹出的警告直接确认</p><p><img src="/images/hexo-vercel-blog/cf-warn.png" alt="警告" loading="lazy"></p><p>在下一页会要求将域名的名称服务器(即 Nameserver)更改为 Cloudflare 提供给你个人的服务器</p><p><img src="/images/hexo-vercel-blog/cf-nameserver.png" alt="Nameserver" loading="lazy"></p><p>这步操作因注册商而异，也请自行搜索</p><p>更改名称服务器需要花费一些时间，我的大部分域名在半小时左右设置成功</p><p>然后，在 Vercel 项目设置中添加你的域名</p><p>需要注意的是，如果直接使用顶级域名，Vercel 会询问你 www 的处理方式，我个人推荐将 www 跳转到根域(即第二个选项)</p><p><img src="/images/hexo-vercel-blog/vercel-domain.png" alt="顶级域名" loading="lazy"></p><p>然后，前往 <a href="https://dash.cloudflare.com/">Cloudflare 仪表盘</a>，选择你的域名，进入左侧的 <strong>DNS</strong> 页面</p><p>点击<strong>添加记录</strong></p><p><strong>类型</strong>根据 Vercel 的提示选择 <code>CNAME</code> 或 <code>A</code></p><p><strong>名称</strong>是域名的前缀，比如 <code>blog</code> 就会解析到 <code>blog.your.domain</code>，需要注意的是，根域应该使用 <code>@</code> 作为名称</p><p><strong>IPv4 地址</strong> 或 <strong>目标</strong> 按照 Vercel 的要求输入</p><p><strong>代理状态</strong>控制解析需不需要走 Cloudflare 的 CDN，但因为 Cloudflare CDN 在国内速度极为缓慢(cfcdn是减速器.webp)，所以我推荐你把它关掉</p><p><strong>TTL</strong> 没有需要的话保持默认即可</p><p>在添加完成后，它应该会像是这样</p><p><img src="/images/hexo-vercel-blog/cf-dns-record.png" alt="DNS 记录" loading="lazy"></p><p>如果配置没问题的话，回到 Vercel 项目设置中就能够看到 Valid Configuration 了</p><p>这时就已经可以通过域名来访问你的博客了</p><p>如果在访问时提示不安全，请等待 Vercel 配置好 SSL 证书后再进行访问</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Guide" scheme="https://chitang.tech/tags/Guide/"/>
    
    <category term="Hexo" scheme="https://chitang.tech/tags/Hexo/"/>
    
    <category term="Vercel" scheme="https://chitang.tech/tags/Vercel/"/>
    
    <category term="Blog" scheme="https://chitang.tech/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>安卓部署 GrassCutter 简易教程</title>
    <link href="https://chitang.tech/posts/grasscutter-android/"/>
    <id>https://chitang.tech/posts/grasscutter-android/</id>
    <published>2022-05-01T02:26:34.000Z</published>
    <updated>2022-06-18T03:21:26.591Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>博主:<br>文章不是我写的，左边联系方式是我个人的而不是文章原作者<br>这边是授权发布<br>如果有问题的话建议去 <a href="https://t.me/genshinhelper">@genshinhelper</a> 和 <a href="https://t.me/genkitCN_chat">@genkitCN_chat</a></p></blockquote><div class="warning"><blockquote><p>看前须知：此教程必须有root，没root痛快衮。别来问没root怎么办，打钱也不行。<br>此教程也需要你有一定的Linux基础。</p></blockquote></div><h2 id="下载软件"><a href="#下载软件" class="headerlink" title="下载软件"></a>下载软件</h2><p>下载并安装Linux Deploy。</p><p><a href="https://github.com/meefik/linuxdeploy">https://github.com/meefik/linuxdeploy</a></p><h2 id="配置-Linux-Deploy"><a href="#配置-Linux-Deploy" class="headerlink" title="配置 Linux Deploy"></a>配置 Linux Deploy</h2><p>进入 Linux Deploy,点击右下角配置按钮，修改选项为如下内容</p><p>发行版改为 arch<br>架构改为 aarch64<br>源地址改为 <code>http://mirrors.ustc.edu.cn/archlinuxarm</code><br>安装类型改为 目录<br>安装路径改为 <code>/data/linux</code><br>用户名和密码随意<br>本地化改为 <code>zh_CN.UTF-8</code><br>继续往下翻，找到 ssh ，勾选”启用”</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>点开右上角菜单，点击部署，然后等待。<br>出现 <code>&lt;&lt;deploy</code> 即完成。</p><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p>部署完之后点击下方的启动。<br>然后使用 ssh 客户端(如 juicessh)连接.<br>地址 <code>127.0.0.1</code> ,用户名和密码与刚才设置的相同.<br>如果跳出第一次连接的窗口，点击确定。<br>如果操作无误，你应该能看到命令行了。</p><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><h3 id="基本环境"><a href="#基本环境" class="headerlink" title="基本环境"></a>基本环境</h3><p>输入命令</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -Sy --overwrite <span class="token punctuation">\</span>* <span class="token function">git</span> <span class="token function">wget</span> <span class="token function">curl</span> mitmproxy</code></pre><h3 id="MongoDB-数据库"><a href="#MongoDB-数据库" class="headerlink" title="MongoDB 数据库"></a>MongoDB 数据库</h3><blockquote><p>如果按照下面的教程，执行时提示”非法指令”,这是因为你的设备较老。请尝试使用4.4.20版本。</p></blockquote><p>下载 <a href="https://drive.google.com/file/d/1rdR3TeWtvQt8z738iyfGX6riSXCbrIe1/">mongod 主程序 5.0.8</a> (在骁龙 865 测试可用)<br>下载 <a href="https://drive.google.com/file/d/1sQEMyvhqZoIWiZcbFsL4r6-8-1ZY1BVz">mongod 主程序 4.4.20</a> (在骁龙 660 测试可用)<br>下载来的 mongod 主程序扔进安装路径下的 <code>/usr/bin</code> ,并将权限修改为 755 .如果文件名有改变，请将其改为 <code>mongod</code><br>然后登陆进 ssh ，输入</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> /usr/db<span class="token punctuation">;</span><span class="token function">sudo</span> mongod --dbpath /usr/db --bind_ip <span class="token number">127.0</span>.0.1</code></pre><p><code>--bind_ip</code>项请按照需求修改。默认情况下<code>127.0.0.1</code>足矣。</p><h3 id="Java-环境"><a href="#Java-环境" class="headerlink" title="Java 环境"></a>Java 环境</h3><p>登录进 ssh ，输入:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://d6.injdk.cn/oraclejdk/17/jdk-17_linux-aarch64_bin.tar.gz<span class="token punctuation">;</span><span class="token function">tar</span> xzvf jdk-17_linux-aarch64_bin.tar.gz</code></pre><p>命令完成后，在 <code>~/.bashrc</code> 中填上以下几句:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Java environment</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">JHOME</span><span class="token operator">=~</span>/jdk-17.0.1<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$JHOME</span>/bin:<span class="token environment constant">$PATH</span></code></pre><details>  <summary>如果不会在终端使用编辑器请使用以下命令</summary>  <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">>></span> ~/.bashrc <span class="token operator">&lt;&lt;</span> <span class="token string">EOFexport JHOME=~/jdk-17.0.1export PATH=\<span class="token variable">$JHOME</span>/bin:\<span class="token environment constant">$PATH</span>EOF</span></code></pre></details><p>最后，输入</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.bashrc<span class="token punctuation">;</span>java -version</code></pre><p>如果产生了如下输出，Java 配置即完成.</p><pre class="language-none"><code class="language-none">java version &quot;17.0.1&quot; 2021-10-19 LTSJava(TM) SE Runtime Environment (build 17.0.1+12-LTS-39)Java HotSpot(TM) 64-Bit Server VM (build 17.0.1+12-LTS-39, mixed mode, sharing)</code></pre><h2 id="搭建服务器"><a href="#搭建服务器" class="headerlink" title="搭建服务器"></a>搭建服务器</h2><p>搭建服务器的操作其实大同小异，可以参考<a href="https://blog.tomys.top/2022-04/GenshinTJ/">此教程</a>.<br>本教程只阐述不同的部分。<br>在服务器文件放好后，进入目录，输入</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> java -jar <span class="token operator">&lt;</span>grasscutter.jar<span class="token operator">></span></code></pre><p>来开启服务器。</p><blockquote><p>主文件名因人而异，按需修改。<br>例如现在我的文件结构是这样<br><img src="/images/grasscutter-android/files.png" alt="floder-content" loading="lazy"><br>主文件名是 <code>grasscutterZH-dev-775f4cb.jar</code><br>则应该运行:<br>  <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> java -jar grasscutterZH-dev-775f4cb.jar</code></pre></p></blockquote><p>再开另一个终端，进入目录，输入</p><pre class="language-bash" data-language="bash"><code class="language-bash">mitmproxy -k -s proxy.py</code></pre><p>来开启 mitmproxy。</p><blockquote><p>若有公网连接需求，可以在运行参数中添加 <code>--set block_global=false</code></p></blockquote><p>如何连接服务器请同样参考上面的教程。</p><h2 id="特殊需求"><a href="#特殊需求" class="headerlink" title="特殊需求"></a>特殊需求</h2><blockquote><p>我想自己编译 grasscutter，可是 archlinuxarm 源里似乎没有合适的 gradle，怎么办？</p></blockquote><p>输入以下命令,全部选项默认。</p><pre class="language-bash" data-language="bash"><code class="language-bash">pacman -U --overwrite <span class="token punctuation">\</span>* https://mirrors.ustc.edu.cn/archlinux/community/os/x86_64/gradle-7.4.2-1-any.pkg.tar.zst<span class="token punctuation">;</span>pacman -Rdd jdk-openjdk</code></pre><p>输入 <code>gradle -v</code> 出现以下输出即成功。当然，不一定非要和下面的完全一样。</p><pre class="language-none"><code class="language-none">------------------------------------------------------------Gradle 7.4.2------------------------------------------------------------Build time:   2022-03-31 16:40:07 UTCRevision:     &lt;unknown&gt;Groovy:       3.0.9Ant:          Apache Ant(TM) version 1.10.11 compiled on July 10 2021JVM:          17.0.1 (Oracle Corporation 17.0.1+12-LTS-39)OS:           Linux 4.19.226-IllusionX+ aarch64</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Android" scheme="https://chitang.tech/tags/Android/"/>
    
    <category term="GrassCutter" scheme="https://chitang.tech/tags/GrassCutter/"/>
    
    <category term="原神" scheme="https://chitang.tech/tags/%E5%8E%9F%E7%A5%9E/"/>
    
  </entry>
  
  <entry>
    <title>andOTP - 开源, 多协议的手机验证器</title>
    <link href="https://chitang.tech/posts/andOTP/"/>
    <id>https://chitang.tech/posts/andOTP/</id>
    <published>2022-04-16T05:38:50.000Z</published>
    <updated>2022-06-18T03:21:26.591Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>andOTP is a two-factor authentication App for Android 5.1+.</p><p>It implements Time-based One-time Passwords (TOTP) and HMAC-Based One-Time Passwords (HOTP).<br>Simply scan the QR code and login with the generated 6-digit code.</p></blockquote><p>andOTP 使用 MIT 协议开源，代码托管在 <a href="https://github.com/andOTP/andOTP">GitHub</a> 上</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>andOTP 是一个开源软件，可以前往 <a href="https://github.com/andOTP/andOTP/releases">GitHub Releases</a> 下载，官方也上架了 <a href="https://f-droid.org/packages/org.shadowice.flocke.andotp/">F-Droid</a> 和 <a href="https://play.google.com/store/apps/details?id=org.shadowice.flocke.andotp">Google Play</a> (我个人推荐 F-Droid)。</p><h2 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h2><h3 id="TOTP-HOTP-以及-MOTP"><a href="#TOTP-HOTP-以及-MOTP" class="headerlink" title="TOTP, HOTP 以及 MOTP"></a>TOTP, HOTP 以及 MOTP</h3><p>在主界面右下角的加号中提供了三种添加方式</p><p>大部分网站会提供一个二维码供扫描，根据需要选择 扫描二维码 和 相册中选择二维码 就好</p><p>如果只有提供密钥的话就需要选择 输入详细信息 了</p><p>类型选择对应的</p><p>签发方及名称可随意，比如我的 Cloudflare 这样填写</p><p><img src="/images/andOTP/Cloudflare1.jpg" alt="Cloudflare 详细信息" loading="lazy"></p><p>在主界面看起来会像这样</p><p><img src="/images/andOTP/Cloudflare2.jpg" alt="Cloudflare Home" loading="lazy"></p><p>密钥就填网站给的</p><p>标签可自己设置，便于区分</p><p>高级选项中有周期, 数字, 算法</p><p>算法很好理解，周期是指验证码的刷新时间，数字是验证码的位数</p><p>如果没有需要最好不要动</p><h3 id="Steam"><a href="#Steam" class="headerlink" title="Steam"></a>Steam</h3><p>Steam 验证器比较特殊，只能通过手动输入信息来填写</p><p>密钥获取方式也比较特殊</p><p>而且手机需要经过 root</p><p>使用任何能够访问 <code>/data</code> 目录的工具找到这个文件</p><pre class="language-none"><code class="language-none">&#x2F;data&#x2F;data&#x2F;com.valvesoftware.android.steam.community&#x2F;files&#x2F;Steamguard-&lt;STEAMID&gt;</code></pre><p>使用任何能够访问它的工具打开，在文件里面能够找到这样一部分</p><pre class="language-none"><code class="language-none">&quot;uri&quot;:&quot;otpauth:\&#x2F;\&#x2F;totp\&#x2F;Steam:USERNAME?secret&#x3D;################################&amp;issuer&#x3D;Steam&quot;</code></pre><p>在 <code>secret=</code> 后面<code>&amp;issuer</code> 前面的就是我们所需要的密钥了，将它保存好，然后回到 andOTP</p><p>在右下角的添加中选择 输入详细信息</p><p>类型选择 <code>STEAM</code></p><p>签发方和名称随意</p><p>密钥就填写刚刚获取到的</p><p>标签随意</p><p>高级选项不要动<del>你也动不了</del></p><p>推荐这样填写</p><p><img src="/images/andOTP/Steam1.jpg" alt="Steam 详细信息" loading="lazy"></p><p>在主页就可以正常显示验证码了</p><p><img src="/images/andOTP/Steam2.jpg" alt="Steam Home" loading="lazy"></p><h2 id="推荐的设置项"><a href="#推荐的设置项" class="headerlink" title="推荐的设置项"></a>推荐的设置项</h2><p>andOTP 的设置在右上角的更多菜单中，这一部分会讲一下我个人比较推荐的设置项目</p><h3 id="设备验证"><a href="#设备验证" class="headerlink" title="设备验证"></a>设备验证</h3><p>可以选择 无, 密码, PIN, 设备凭据</p><p>前三个都非常好理解，是在 andOTP 单独设置的验证方法</p><p>设备凭据是你设备本身的登录方式</p><p>选择这个可以调用 Android 系统的密码，也可以通过指纹验证(如果有)</p><h3 id="数据库加密"><a href="#数据库加密" class="headerlink" title="数据库加密"></a>数据库加密</h3><p>可以选择 Android 密钥库 或 密码&#x2F;PIN</p><p>如果想要使用设备凭据验证则只能选择 Android 密钥库，没什么好说的</p><p>但是需要注意的一点是</p><p>如果选择 Android 密钥库，SwiftBackup, 手机自带备份, adb backup 都无法备份 andOTP 内的密钥数据（别问我怎么知道的）</p><p><strong>Android 密钥库 用户一定要记得备份</strong></p><h3 id="单击-amp-双击"><a href="#单击-amp-双击" class="headerlink" title="单击 &amp; 双击"></a>单击 &amp; 双击</h3><p>用来设置单击&#x2F;双击条目时进行的操作</p><p>我个人习惯将 单击 设置为 显示&#x2F;隐藏</p><p>双击 设置为 复制</p><h3 id="允许截图"><a href="#允许截图" class="headerlink" title="允许截图"></a>允许截图</h3><p>在关于页面中点击点击八次 “版本”，在弹出的对话框中点击 确定</p><p>回到设置就能在最下方看到 启用屏幕截图 的选项了</p><p>打开后就可以用其他应用在 andOTP 中进行屏幕录制或截图了</p><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><p>在更多菜单中点击 备份</p><p>备份类型可以根据自己的需要来选择，推荐选择已加密</p><p>然后点击 创建备份</p><p>如果选择已加密，在弹出的窗口中为备份文件设置密码</p><p>如果需要恢复备份，在下面点击 还原备份</p><p>选择之前的备份文件，如果有密码的话输入密码就可以还原了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Android" scheme="https://chitang.tech/tags/Android/"/>
    
    <category term="Open Source" scheme="https://chitang.tech/tags/Open-Source/"/>
    
    <category term="Softwares" scheme="https://chitang.tech/tags/Softwares/"/>
    
  </entry>
  
  <entry>
    <title>Arch Linux 折腾指南</title>
    <link href="https://chitang.tech/posts/arch-guide/"/>
    <id>https://chitang.tech/posts/arch-guide/</id>
    <published>2021-12-06T11:01:57.000Z</published>
    <updated>2022-06-18T03:21:26.591Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="warning"><blockquote><p>本文仅为 <a href="https://www.archlinux.org/">Arch Linux</a> 的个人安装 &amp; 配置过程，不代表 Arch Linux 官方<br>Arch Linux 是一个滚动更新的发行版，需要经常通过 <code>sudo pacman -Syu</code> 来更新软件包，否则可能会导致滚挂，如果不经常使用电脑但也想用 Arch Linux，请在<a href="#%E5%86%85%E6%A0%B8%E7%9A%84%E9%80%89%E6%8B%A9">选择内核</a>时采用 <code>linux-lts</code><br>本文命令行中文本编辑均使用 <code>vim</code>，你可以换成任何你喜欢的其他编辑器<br>本文图形界面的配置仅介绍了 <code>Xorg</code> 且美化部分仅有 <code>KDE Plasma</code>(甚至还没写)，如果要使用其他的环境，请自行查找其他文章</p></blockquote></div><p>目录在左侧(移动端为左上角菜单中)，可通过点击目录标题进入相应内容</p><p>To-Do List:</p><ul><li><input disabled="" type="checkbox"> 图形界面美化</li><li><input disabled="" type="checkbox"> 补全教程图片</li><li><input disabled="" type="checkbox"> 制作视频教程 <em>咕咕咕</em></li></ul><h1 id="正式安装前的准备"><a href="#正式安装前的准备" class="headerlink" title="正式安装前的准备"></a>正式安装前的准备</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>Arch Linux 有许多镜像源，你可以在<a href="https://archlinux.org/download/">官方的下载链接</a>中寻找一个离自己最近的镜像源进行下载</p><p>在中国大陆，我推荐<a href="https://mirrors.bfsu.edu.cn/">北京外国语大学开源软件镜像站</a>，在右侧的 “获取下载链接” 处即可找到 Arch Linux 的最新 ISO 文件</p><p><img src="/images/arch-guide/bfsu.png" alt="bfsu" loading="lazy"></p><h2 id="刻录"><a href="#刻录" class="headerlink" title="刻录"></a>刻录</h2><h3 id="Ventoy-推荐"><a href="#Ventoy-推荐" class="headerlink" title="Ventoy(推荐)"></a>Ventoy(推荐)</h3><p>在一个已经安装好 <a href="https://ventoy.net/">Ventoy</a> 的 U 盘上，直接把 ISO 文件放进去即可生效</p><h3 id="Linux-DD"><a href="#Linux-DD" class="headerlink" title="Linux DD"></a>Linux DD</h3><div class="danger"><blockquote><p>在进行 dd 操作前，请确保驱动器内的数据都已经备份，否则会丢失数据</p></blockquote></div><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/path/to/archlinux-*.iso <span class="token assign-left variable">of</span><span class="token operator">=</span>/dev/sdX <span class="token assign-left variable">status</span><span class="token operator">=</span>progress</code></pre><p>将 <code>/path/to/archlinux-*.iso</code> 替换为你的 ISO 文件的位置</p><p>将 <code>/dev/sdX</code> 替换为你的 U 盘设备名</p><p><img src="/images/arch-guide/linux-dd.png" alt="Linux DD" loading="lazy"></p><h3 id="Windows-Rufus"><a href="#Windows-Rufus" class="headerlink" title="Windows Rufus"></a>Windows Rufus</h3><p>在 Windows 上，我更加推荐使用 <a href="https://rufus.ie/">Rufus</a> 进行刻录</p><div class="danger"><blockquote><p>同样地，在进行刻录前，请确保驱动器内的数据都已经备份，否则会丢失数据</p></blockquote></div><h2 id="准备磁盘分区"><a href="#准备磁盘分区" class="headerlink" title="准备磁盘分区"></a>准备磁盘分区</h2><p>最好在进入 Arch Linux LiveCD 前先编辑分区，为 Arch Linux 留出足够的空间，但<strong>不要</strong>在这时对分区进行格式化，否则可能会出现不可预料的问题</p><h2 id="BIOS-设置"><a href="#BIOS-设置" class="headerlink" title="BIOS 设置"></a>BIOS 设置</h2><h3 id="强制-UEFI-启动"><a href="#强制-UEFI-启动" class="headerlink" title="强制 UEFI 启动"></a>强制 UEFI 启动</h3><p>如果没有特殊需求(如需要与采用 Legacy 为引导方式的 Windows 共存)，请前往主板的设置界面关闭 <code>CSM</code> 以强制以 UEFI 方式启动</p><p>具体的设置方式请自行前往互联网寻找答案或在评论区询问</p><h3 id="关闭安全启动"><a href="#关闭安全启动" class="headerlink" title="关闭安全启动"></a>关闭安全启动</h3><p>Arch Linux 的 LiveCD 是不带安全启动签名的，如果启用安全启动会导致无法进入系统</p><p>具体的设置方式也请自行前往互联网寻找答案或在评论区询问</p><h2 id="进入-LiveCD"><a href="#进入-LiveCD" class="headerlink" title="进入 LiveCD"></a>进入 LiveCD</h2><p>在<a href="#%E5%88%BB%E5%BD%95">刻录</a>步骤中，我们已经将 ISO 文件刻录到了 U 盘，现在就应设置为 U 盘启动进入 Arch Linux LiveCD 了</p><p>具体的设置方式请自行前往互联网寻找答案或在评论区询问</p><div class="success"><blockquote><p>至此，正式安装前的准备已完成，请进入 Arch Linux LiveCD 并进行安装</p></blockquote></div><p>Arch Linux ISO 现已加入 <code>archinstall</code> 工具，可以在启动 LiveCD 后运行 <code>archinstall</code> 进行引导式安装</p><p>但根据我几个朋友的反馈，这个工具的 bug 和怪问题还是不少的，所以不推荐使用这种方法安装</p><p>如果你通过 <code>archinstall</code> 安装，那么你可以跳过 <a href="#LiveCD">LiveCD 部分</a>和<a href="#%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2">图形界面部分</a></p><h1 id="LiveCD"><a href="#LiveCD" class="headerlink" title="LiveCD"></a>LiveCD</h1><h2 id="联网"><a href="#联网" class="headerlink" title="联网"></a>联网</h2><h3 id="有线连接到路由器"><a href="#有线连接到路由器" class="headerlink" title="有线连接到路由器"></a>有线连接到路由器</h3><p>如果采用这种方法连接到互联网，那么默认情况下无需其他配置</p><p>如果无法连接到互联网，那么可以尝试重新启动 <code>dhcpcd</code> 服务</p><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl restart dhcpcd</code></pre><h3 id="WiFi-连接"><a href="#WiFi-连接" class="headerlink" title="WiFi 连接"></a>WiFi 连接</h3><p>想要在 LiveCD 中使用 WiFi 会稍微有些麻烦，可以使用 <code>iwctl</code> 命令来进行 WiFi 的配置，在下面会列出 <code>iwctl</code> 的简单使用方法</p><pre class="language-none"><code class="language-none">[archlinux@archlinux ~]$ iwctl  # 进入 iwd 的交互提示符[iwd]# device list  # 列出所有 WiFi 设备[iwd]# station &lt;device&gt; scan  # 扫描 WiFi 网络[iwd]# station &lt;device&gt; connect &lt;ssid&gt;  # 连接到 WiFi 网络</code></pre><p>或者可以改成命令行参数的形式</p><pre class="language-bash" data-language="bash"><code class="language-bash">iwctl --passphrase <span class="token operator">&lt;</span>passphrase<span class="token operator">></span> station <span class="token operator">&lt;</span>device<span class="token operator">></span> connect <span class="token operator">&lt;</span>SSID<span class="token operator">></span></code></pre><h3 id="检查网络连接"><a href="#检查网络连接" class="headerlink" title="检查网络连接"></a>检查网络连接</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ping</span> -c <span class="token number">3</span> archlinux.org</code></pre><p>如果没有报错则说明网络连接正常</p><h2 id="更新系统时间"><a href="#更新系统时间" class="headerlink" title="更新系统时间"></a>更新系统时间</h2><pre class="language-bash" data-language="bash"><code class="language-bash">timedatectl set-ntp <span class="token boolean">true</span></code></pre><h2 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h2><p>首先，通过 <code>lsblk</code> 或是 <code>fdisk -l</code> 确定需要安装 Arch Linux 的硬盘</p><p>在这里，我们只需要确定硬盘的设备名，例如 <code>/dev/sda</code></p><p>在 LiveCD 中分区可以通过 <code>parted</code> <code>fdisk</code> <code>cfdisk</code> 等工具完成，本文章会详细介绍 <code>fdisk</code> 的使用方法</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">fdisk</span> /dev/sdX   <span class="token comment"># 进入 fdisk 交互提示符</span></code></pre><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>m</code></td><td>获取帮助</td></tr><tr><td><code>p</code></td><td>显示当前分区表</td></tr><tr><td><code>n</code></td><td>新建分区</td></tr><tr><td><code>o</code></td><td>新建 MBR 分区表(会丢失数据)</td></tr><tr><td><code>g</code></td><td>新建 GPT 分区表(会丢失数据)</td></tr><tr><td><code>w</code></td><td>保存更改</td></tr><tr><td><code>q</code></td><td>不保存更改退出</td></tr><tr><td><code>d</code></td><td>删除分区</td></tr></tbody></table><p>在新建分区时</p><p><code>Partition number</code> 保持默认，并请记住它，以便下一步操作</p><p><code>First sector</code> 保持默认</p><p><code>Last sector</code> 填写分区大小，以 <code>+</code> 开头，以单位结尾，例如 <code>+512M</code> 为 512MiB 的分区</p><p>MBR 推荐分区:</p><table><thead><tr><th>挂载点</th><th>文件系统</th><th>分区推荐大小(以 120GiB 硬盘为例)</th><th>文章中所使用的分区号</th></tr></thead><tbody><tr><td>&#x2F;</td><td>ext4</td><td>50GiB</td><td>&#x2F;dev&#x2F;sda1</td></tr><tr><td>&#x2F;home</td><td>ext4</td><td>70GiB</td><td>&#x2F;dev&#x2F;sda2</td></tr></tbody></table><p>GPT 推荐分区:</p><table><thead><tr><th>挂载点</th><th>文件系统</th><th>分区推荐大小(以 120GiB 硬盘为例)</th><th>文章中所使用的分区号</th></tr></thead><tbody><tr><td>&#x2F;boot</td><td>FAT32</td><td>300MiB</td><td>&#x2F;dev&#x2F;sda1</td></tr><tr><td>&#x2F;</td><td>ext4</td><td>50GiB</td><td>&#x2F;dev&#x2F;sda2</td></tr><tr><td>&#x2F;home</td><td>ext4</td><td>69.7GiB</td><td>&#x2F;dev&#x2F;sda3</td></tr></tbody></table><p><code>/home</code> 分区是可选的，如果不需要 <code>/home</code> 分区，可以将所用空间全部分配到 <code>/</code> 分区</p><h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><pre class="language-bash" data-language="bash"><code class="language-bash">mkfs.ext4 /dev/sdXY <span class="token comment"># 格式化 /dev/sdXY 为 ext4 文件系统</span>mkfs.fat -F32 /dev/sdXY <span class="token comment"># 格式化 /dev/sdXY 为 FAT32 文件系统</span></code></pre><p>请自行替换 <code>/dev/sdXY</code> 到对应的块设备</p><h2 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h2><h3 id="GPT"><a href="#GPT" class="headerlink" title="GPT"></a>GPT</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mount</span> /dev/sda2 /mnt  <span class="token comment"># 挂载 /dev/sda2 到 /mnt( / 分区)</span><span class="token function">mkdir</span> /mnt/boot /mnt/home <span class="token comment"># 创建 /mnt/boot 和 /mnt/home 文件夹</span><span class="token function">mount</span> /dev/sda1 /mnt/boot <span class="token comment"># 挂载 /dev/sda1 到 /mnt/boot( /boot 分区)</span><span class="token function">mount</span> /dev/sda3 /mnt/home <span class="token comment"># 挂载 /dev/sda3 到 /mnt/home( /home 分区)</span></code></pre><h3 id="MBR"><a href="#MBR" class="headerlink" title="MBR"></a>MBR</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mount</span> /dev/sda1 /mnt  <span class="token comment"># 挂载 /dev/sda1 到 /mnt( / 分区)</span><span class="token function">mkdir</span> /mnt/home <span class="token comment"># 创建 /mnt/home 文件夹</span><span class="token function">mount</span> /dev/sda2 /mnt/home <span class="token comment"># 挂载 /dev/sda2 到 /mnt/home( /home 分区)</span></code></pre><h2 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h2><p>与<a href="#%E4%B8%8B%E8%BD%BD">下载 Arch Linux</a>一样，在中国大陆地区，默认的镜像源是极慢的</p><p>可以通过编辑 <code>/etc/pacman.d/mirrorlist</code> 的方式来更改镜像源</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/pacman.d/mirrorlist</code></pre><p>在文件的开头添加类似 <code>Server = https://mirrors.bfsu.edu.cn/archlinux/$repo/os/$arch</code> 的内容，保存并退出</p><h2 id="安装-Arch-Linux-到硬盘"><a href="#安装-Arch-Linux-到硬盘" class="headerlink" title="安装 Arch Linux 到硬盘"></a>安装 Arch Linux 到硬盘</h2><h3 id="内核的选择"><a href="#内核的选择" class="headerlink" title="内核的选择"></a>内核的选择</h3><p>在这里列出了官方源中所存在的部分内核，可以根据自己的需求选择</p><table><thead><tr><th>内核</th><th>特点</th></tr></thead><tbody><tr><td><code>linux</code></td><td>官方的默认内核</td></tr><tr><td><code>linux-lts</code></td><td>官方的长期支持内核，版本较低，但相对不容易滚挂</td></tr><tr><td><code>linux-zen</code></td><td>社区制作的更适合日常使用的内核</td></tr></tbody></table><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="language-bash" data-language="bash"><code class="language-bash">pacstrap /mnt base base-devel linux-firmware <span class="token operator">&lt;</span>linux-kernel<span class="token operator">></span> <span class="token operator">&lt;</span>linux-kernel<span class="token operator">></span>-headers grub <span class="token function">vim</span> dhcpcd iwd os-prober efibootmgr <span class="token punctuation">[</span>other packages you want<span class="token punctuation">]</span></code></pre><p>将 <code>&lt;linux-kernel&gt;</code> 替换为你所选定的内核</p><h2 id="生成分区表"><a href="#生成分区表" class="headerlink" title="生成分区表"></a>生成分区表</h2><pre class="language-bash" data-language="bash"><code class="language-bash">genfstab -U /mnt <span class="token operator">></span> /mnt/etc/fstab</code></pre><p>最好再自行检查一下 <code>/mnt/etc/fstab</code> 以确保信息正确</p><h2 id="设置时区"><a href="#设置时区" class="headerlink" title="设置时区"></a>设置时区</h2><pre class="language-bash" data-language="bash"><code class="language-bash">arch-chroot /mnt  <span class="token comment"># 切换到新的系统</span><span class="token function">ln</span> -sf /usr/share/zoneinfo/<span class="token operator">&lt;</span>Region<span class="token operator">></span>/<span class="token operator">&lt;</span>City<span class="token operator">></span> /etc/localtimehwclock --systohc</code></pre><p><code>&lt;Region&gt;</code> 和 <code>&lt;City&gt;</code> 分别是你所在的地区和城市，例如 <code>Asia/Shanghai</code></p><div class="warning"><blockquote><p><strong>如果在之后没有执行 <code>exit</code> 命令退出 arch-chroot 环境，在后面的操作中就不需要再次执行 <code>arch-chroot /mnt</code></strong></p></blockquote></div><h2 id="设置网络相关"><a href="#设置网络相关" class="headerlink" title="设置网络相关"></a>设置网络相关</h2><h3 id="计算机名"><a href="#计算机名" class="headerlink" title="计算机名"></a>计算机名</h3><pre class="language-bash" data-language="bash"><code class="language-bash">arch-chroot /mnt<span class="token function">vim</span> /etc/hostname</code></pre><p>在文件中写入你的计算机名，例如 <code>chitang-pc</code></p><p>保存并退出</p><h3 id="hosts-文件"><a href="#hosts-文件" class="headerlink" title="hosts 文件"></a>hosts 文件</h3><pre class="language-bash" data-language="bash"><code class="language-bash">arch-chroot /mnt<span class="token function">vim</span> /etc/hosts</code></pre><p>在文件中写入下面的内容</p><pre class="language-none"><code class="language-none">127.0.0.1 localhost::1       localhost127.0.1.1 &lt;hostname&gt;.localdomain  &lt;hostname&gt;</code></pre><p>将 <code>&lt;hostname&gt;</code> 替换为你的计算机名，保存并退出</p><h2 id="配置本地化"><a href="#配置本地化" class="headerlink" title="配置本地化"></a>配置本地化</h2><h3 id="locale-gen"><a href="#locale-gen" class="headerlink" title="locale.gen"></a>locale.gen</h3><pre class="language-bash" data-language="bash"><code class="language-bash">arch-chroot /mnt<span class="token function">vim</span> /etc/locale.gen</code></pre><p>在文件中找到 <code>en_US.UTF-8 UTF-8</code> 及 <code>zh_CN.UTF-8 UTF-8</code>，删除前面的 <code>#</code> 以取消注释</p><p>同样地，在这里也可以设置其他语言的的 <code>locale</code>，例如 <code>ja_JP.UTF-8 UTF-8</code></p><pre class="language-bash" data-language="bash"><code class="language-bash">arch-chroot /mntlocale-gen  <span class="token comment"># 生成本地化文件</span></code></pre><h3 id="locale-conf"><a href="#locale-conf" class="headerlink" title="locale.conf"></a>locale.conf</h3><pre class="language-bash" data-language="bash"><code class="language-bash">arch-chroot /mnt<span class="token function">vim</span> /etc/locale.conf</code></pre><p>在文件中加入 <code>LANG=en_US.UTF-8</code>，保存并退出</p><div class="warning"><blockquote><p>请不要在这里设置任何其他的语言，否则极易导致 tty 乱码</p></blockquote></div><h2 id="允许-os-prober-检测-Windows"><a href="#允许-os-prober-检测-Windows" class="headerlink" title="允许 os-prober 检测 Windows"></a>允许 os-prober 检测 Windows</h2><div class="success"><blockquote><p>可选，如果不需要启用 GRUB 对 Windows Boot Manager 的支持，可以跳过这一步</p></blockquote></div><pre class="language-bash" data-language="bash"><code class="language-bash">arch-chroot /mnt<span class="token function">vim</span> /etc/default/grub</code></pre><p>在文件任意位置加入 <code>GRUB_DISABLE_OS_PROBER=&quot;false&quot;</code>，保存并退出</p><h2 id="安装引导"><a href="#安装引导" class="headerlink" title="安装引导"></a>安装引导</h2><h3 id="UEFI-GPT"><a href="#UEFI-GPT" class="headerlink" title="UEFI + GPT"></a>UEFI + GPT</h3><pre class="language-bash" data-language="bash"><code class="language-bash">arch-chroot /mntgrub-install --target<span class="token operator">=</span>x86_64-efi --efi-directory<span class="token operator">=</span>/boot --bootloader-id<span class="token operator">=</span>grub <span class="token comment"># 在 /boot 安装引导</span><span class="token function">grub-mkconfig</span> -o /boot/grub/grub.cfg  <span class="token comment"># 生成 GRUB 配置</span></code></pre><h3 id="Legacy-MBR"><a href="#Legacy-MBR" class="headerlink" title="Legacy + MBR"></a>Legacy + MBR</h3><pre class="language-bash" data-language="bash"><code class="language-bash">arch-chroot /mntgrub-install --target<span class="token operator">=</span>i386-pc /dev/sdX  <span class="token comment"># 在 /dev/sdX 安装引导，不要加分区号</span><span class="token function">grub-mkconfig</span> -o /boot/grub/grub.cfg  <span class="token comment"># 生成 GRUB 配置</span></code></pre><h2 id="重启前要做的事"><a href="#重启前要做的事" class="headerlink" title="重启前要做的事"></a>重启前要做的事</h2><pre class="language-bash" data-language="bash"><code class="language-bash">arch-chroot /mntsystemctl <span class="token builtin class-name">enable</span> dhcpcd <span class="token comment"># 启用 dhcpcd 服务以便进入系统后自动联网</span><span class="token function">passwd</span>  <span class="token comment"># 设置 root 密码</span></code></pre><h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><div class="success"><blockquote><p>至此，在 LiveCD 部分的安装已经完成，你现在可以拔掉启动介质，重启，然后进入 Arch Linux 的 tty</p></blockquote></div><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="创建新用户"><a href="#创建新用户" class="headerlink" title="创建新用户"></a>创建新用户</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">useradd</span> -m -G wheel <span class="token operator">&lt;</span>username<span class="token operator">></span><span class="token function">passwd</span> <span class="token operator">&lt;</span>username<span class="token operator">></span><span class="token assign-left variable">EDITOR</span><span class="token operator">=</span>vim visudo</code></pre><p>在打开的文件中找到 <code>%wheel ALL=(ALL) ALL</code>，删除前面的 <code>#</code> 以取消注释，保存并退出</p><p>之后，就可以退出 root 账户(直接 <code>exit</code>)，然后使用你自己的账户进行下面的操作</p><h2 id="交换文件"><a href="#交换文件" class="headerlink" title="交换文件"></a>交换文件</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/zero <span class="token assign-left variable">of</span><span class="token operator">=</span>/swapfile <span class="token assign-left variable">bs</span><span class="token operator">=</span>1M <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token operator">&lt;</span>size<span class="token operator">></span>  <span class="token comment"># 在 size 处填写需要的 swap 空间大小(单位 MiB)</span><span class="token function">sudo</span> <span class="token function">mkswap</span> /swapfile<span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">600</span> /swapfile<span class="token function">sudo</span> <span class="token function">swapon</span> /swapfile</code></pre><p>然后编辑 <code>/etc/fstab</code>，在文件末尾加入以下内容</p><pre class="language-none"><code class="language-none">&#x2F;swapfile       none    swap    defaults        0       0</code></pre><h2 id="pacman-conf-的配置"><a href="#pacman-conf-的配置" class="headerlink" title="pacman.conf 的配置"></a>pacman.conf 的配置</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/pacman.conf</code></pre><h3 id="Misc-options"><a href="#Misc-options" class="headerlink" title="Misc options"></a>Misc options</h3><div class="success"><blockquote><p>这部分内容是可选的，且不影响基本操作</p></blockquote></div><p>将 <code>Color</code> 取消注释，让你的 pacman 有颜色</p><p>手动加入 <code>ILoveCandy</code>，把 pacman 下载的进度条替换成吃豆人</p><p>将 <code>VerbosePkgLists</code> 取消注释，让 pacman 以表格显示更详细的信息</p><h3 id="额外软件源"><a href="#额外软件源" class="headerlink" title="额外软件源"></a>额外软件源</h3><h4 id="multilib"><a href="#multilib" class="headerlink" title="multilib"></a>multilib</h4><p><code>multilib</code> 软件源中包含一些 32 位的依赖包</p><p>翻到文件后面，找到</p><pre class="language-none"><code class="language-none">#[multilib]#Include &#x3D; &#x2F;etc&#x2F;pacman.d&#x2F;mirrorlist</code></pre><p>去掉这两行前面的 <code>#</code> 以取消注释即可启用 <code>multilib</code> 软件源</p><h4 id="Arch-Linux-CN"><a href="#Arch-Linux-CN" class="headerlink" title="Arch Linux CN"></a>Arch Linux CN</h4><p><code>Arch Linux CN</code> 源中包含许多在国内使用 Linux 常用的软件包，虽然这些都可以在 AUR 中安装，但这里的软件包下载速度比较快</p><p>在文件最后面添加下面这两行</p><pre class="language-none"><code class="language-none">[archlinuxcn]Server &#x3D; https:&#x2F;&#x2F;mirrors.bfsu.edu.cn&#x2F;archlinuxcn&#x2F;$arch</code></pre><p>保存并退出</p><p>更新软件源并安装密钥</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -Sy archlinuxcn-keyring</code></pre><h4 id="Chaotic-AUR"><a href="#Chaotic-AUR" class="headerlink" title="Chaotic-AUR"></a>Chaotic-AUR</h4><p><code>Chaotic-AUR</code> 中包含一些经过编译的 AUR 软件</p><p>导入 <code>Chaotic-AUR</code> 的 Pacman 密钥并安装 mirrorlist</p><pre class="language-bash" data-language="bash"><code class="language-bash">pacman-key --recv-key FBA220DFC880C036 --keyserver keyserver.ubuntu.compacman-key --lsign-key FBA220DFC880C036pacman -U <span class="token string">'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-keyring.pkg.tar.zst'</span> <span class="token string">'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-mirrorlist.pkg.tar.zst'</span></code></pre><p>然后在 <code>/etc/pacman.conf</code> 最下方加入以下两行</p><pre class="language-none"><code class="language-none">[chaotic-aur]Include &#x3D; &#x2F;etc&#x2F;pacman.d&#x2F;chaotic-mirrorlist </code></pre><p>然后更新软件源</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -Sy</code></pre><p>如果速度过慢可以尝试使用反代服务</p><h4 id="Clansty"><a href="#Clansty" class="headerlink" title="Clansty"></a>Clansty</h4><p>同样也是一些编译后的 AUR 软件</p><p>在 <code>/etc/pacman.conf</code> 最下方加入: </p><pre class="language-none"><code class="language-none">[Clansty]SigLevel &#x3D; NeverServer &#x3D; https:&#x2F;&#x2F;repo.lwqwq.com&#x2F;archlinux&#x2F;$archServer &#x3D; https:&#x2F;&#x2F;pacman.ltd&#x2F;archlinux&#x2F;$archServer &#x3D; https:&#x2F;&#x2F;repo.clansty.com&#x2F;archlinux&#x2F;$arch</code></pre><p>然后更新软件源</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -Sy</code></pre><h2 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h2><div class="warning"><blockquote><p>这部分中文配置仅在桌面环境运行时有效，因为在 tty 中显示中文会导致乱码</p></blockquote></div><h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ~/.xprofile</code></pre><p>添加下面两行:</p><pre class="language-none"><code class="language-none">export LANG&#x3D;zh_CN.UTF-8export LC_ALL&#x3D;zh_CN.UTF-8</code></pre><h3 id="安装字体"><a href="#安装字体" class="headerlink" title="安装字体"></a>安装字体</h3><p>部分来自 AUR 的字体需要通过 <a href="#aur-tools">AUR Tool</a> 安装</p><p>在下面列出了一些(我推荐的)字体，可以自行安装</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S wqy-microhei <span class="token comment"># 文泉驿</span><span class="token function">sudo</span> pacman -S adobe-source-sans-fonts  <span class="token comment"># 思源黑体</span>paru -S harmonyos-sans-git  <span class="token comment"># 鸿蒙黑体</span>paru -S ttf-misans  <span class="token comment"># MiSans</span></code></pre><h2 id="Zsh"><a href="#Zsh" class="headerlink" title="Zsh"></a>Zsh</h2><p><a href="https://zsh.sourceforge.io/">Zsh</a> 是一个 Shell 程序</p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S <span class="token function">zsh</span></code></pre><h3 id="更改默认-Shell"><a href="#更改默认-Shell" class="headerlink" title="更改默认 Shell"></a>更改默认 Shell</h3><pre class="language-bash" data-language="bash"><code class="language-bash">chsh -s /usr/bin/zsh</code></pre><p>如果使用图形界面，也请将所使用的终端模拟器默认 Shell 更换为 zsh</p><h3 id="Zim"><a href="#Zim" class="headerlink" title="Zim"></a>Zim</h3><p><a href="https://zimfw.sh/">Zim</a> 是一个 zsh 的模块化配置框架</p><h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> -nv -O - https://raw.githubusercontent.com/zimfw/install/master/install.zsh <span class="token operator">|</span> <span class="token function">zsh</span></code></pre><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><p>Zimfw 的配置文件为 <code>~/.zimrc</code></p><p>使用任意文本编辑器打开它，配置文件的编写格式为:</p><pre class="language-none"><code class="language-none">zmodule [module name] # 模块在 zimfw 官方组织zmodule [author]&#x2F;[module name] # 模块在 Github 上zmodule https:&#x2F;&#x2F;[host]&#x2F;[author]&#x2F;[module name].git # 模块在其他 Git 仓库中</code></pre><p>在添加好模块后，可以通过 <code>zimfw install</code> 命令安装，本文同样提供<a href="#%E6%A8%A1%E5%9D%97%E6%8E%A8%E8%8D%90">模块推荐</a></p><p>在之后可以通过 <code>zimfw update</code> 更新模块，通过 <code>zimfw upgrade</code> 更新 Zim 本体</p><h4 id="模块推荐"><a href="#模块推荐" class="headerlink" title="模块推荐"></a>模块推荐</h4><p>部分内容来自 <a href="https://zimfw.sh/docs/modules/">Zim 官方网站</a></p><h5 id="实用工具"><a href="#实用工具" class="headerlink" title="实用工具"></a>实用工具</h5><table><thead><tr><th>模块名</th><th>作用</th></tr></thead><tbody><tr><td>archive</td><td>快速操作压缩包</td></tr><tr><td>exa</td><td>添加 exa 的 alias 以便能够在 ls 中显示图片和图标</td></tr><tr><td>pacman</td><td>添加 pacman 的 alias 方便操作</td></tr><tr><td>git-info</td><td>提供当前 Git repo 的状态信息</td></tr><tr><td>Aloxaf&#x2F;fzf-tab</td><td>将 Tab 菜单替换为类似 fzf 的菜单</td></tr><tr><td>zsh-users&#x2F;zsh-autosuggestions</td><td>增加自动补全功能</td></tr><tr><td>zsh-users&#x2F;zsh-syntax-highlighting</td><td>增加语法高亮功能</td></tr><tr><td>zsh-users&#x2F;zsh-history-substring-search</td><td>增加搜索历史记录功能</td></tr></tbody></table><h5 id="主题-挑选一个安装即可"><a href="#主题-挑选一个安装即可" class="headerlink" title="主题(挑选一个安装即可)"></a>主题(挑选一个安装即可)</h5><table><thead><tr><th>模块名</th><th>特点</th><th>预览</th></tr></thead><tbody><tr><td>gitster</td><td>简洁</td><td><img src="https://camo.githubusercontent.com/7ebba9863fafbf14cf179ef1555d8a53882188eb3d5b125084c8d26f2b008f71/68747470733a2f2f7a696d66772e6769746875622e696f2f696d616765732f70726f6d7074732f6769747374657240322e706e67" alt="gitster" loading="lazy"></td></tr><tr><td>magicmace</td><td>方便查看 Git 状态</td><td><img src="https://camo.githubusercontent.com/c8215d78fe82b947668317b16cdee0a16d25ed7b24c462cb198e1ac6c037f3f1/68747470733a2f2f7a696d66772e6769746875622e696f2f696d616765732f70726f6d7074732f6d616769636d61636540322e706e67" alt="magicmace" loading="lazy"></td></tr><tr><td>romkatv&#x2F;powerlevel10k</td><td>美观，可自定义性极强</td><td><img src="https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/prompt-styles-high-contrast.png" alt="powerlevel10k" loading="lazy"></td></tr></tbody></table><h1 id="图形界面"><a href="#图形界面" class="headerlink" title="图形界面"></a>图形界面</h1><h2 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h2><h3 id="显卡驱动"><a href="#显卡驱动" class="headerlink" title="显卡驱动"></a>显卡驱动</h3><div class="info"><blockquote><p>部分驱动需要启用 <a href="#multilib">32 位源</a><br>带有 <sup>AUR</sup> 上标的软件包是来自 AUR 的，需要使用 <a href="#aur-tools">AUR Tool</a> 安装</p></blockquote></div><h4 id="Intel-显卡"><a href="#Intel-显卡" class="headerlink" title="Intel 显卡"></a>Intel 显卡</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S xf86-video-intel <span class="token comment"># 驱动本体</span><span class="token function">sudo</span> pacman -S mesa <span class="token comment"># OpenGL 支持</span><span class="token function">sudo</span> pacman -S lib32-mesa <span class="token comment"># 32 位 OpenGL 支持</span><span class="token function">sudo</span> pacman -S vulkan-intel <span class="token comment"># Vulkan 支持</span>paru -S intel-opencl  <span class="token comment"># OpenCL 支持</span></code></pre><h4 id="NVIDIA-显卡"><a href="#NVIDIA-显卡" class="headerlink" title="NVIDIA 显卡"></a>NVIDIA 显卡</h4><h5 id="专有驱动"><a href="#专有驱动" class="headerlink" title="专有驱动"></a>专有驱动</h5><p>本体:</p><table><thead><tr><th></th><th>GeForce 930(NV110 及更新)</th><th>GeForce 630-920(NVE0)</th><th>GeForce 400&#x2F;500&#x2F;600(NVCx &amp; NVDx)</th><th>GeForce 8&#x2F;9(NV5x, NV8x, NV9x, NVAx) 不推荐安装专有驱动</th><th>GeForce 7 及以下</th></tr></thead><tbody><tr><td>linux</td><td>nvidia</td><td>nvidia-470xx-dkms<sup>AUR</sup></td><td>nvidia-390xx-dkms<sup>AUR</sup></td><td>nvidia-340xx-dkms<sup>AUR</sup></td><td>不支持</td></tr><tr><td>linux-lts</td><td>nvidia-lts</td><td>nvidia-470xx-dkms<sup>AUR</sup></td><td>nvidia-390xx-dkms<sup>AUR</sup></td><td>nvidia-340xx-dkms<sup>AUR</sup></td><td>不支持</td></tr><tr><td>其他</td><td>nvidia-dkms</td><td>nvidia-470xx-dkms<sup>AUR</sup></td><td>nvidia-390xx-dkms<sup>AUR</sup></td><td>nvidia-340xx-dkms<sup>AUR</sup></td><td>不支持</td></tr></tbody></table><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S <span class="token operator">&lt;</span>driver<span class="token operator">></span> <span class="token comment"># 驱动本体</span><span class="token function">sudo</span> pacman -S <span class="token operator">&lt;</span>driver<span class="token operator">></span>-utils <span class="token comment"># OpenGL 支持</span><span class="token function">sudo</span> pacman -S lib32-<span class="token operator">&lt;</span>driver<span class="token operator">></span>-utils <span class="token comment"># 32 位 OpenGL 支持</span><span class="token function">sudo</span> pacman -S opencl-nvidia  <span class="token comment"># OpenCL 支持</span></code></pre><h5 id="开源驱动"><a href="#开源驱动" class="headerlink" title="开源驱动"></a>开源驱动</h5><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S xf86-video-nouveau <span class="token comment"># 驱动本体</span><span class="token function">sudo</span> pacman -S mesa <span class="token comment"># OpenGL 支持</span><span class="token function">sudo</span> pacman -S lib32-mesa <span class="token comment"># 32 位 OpenGL 支持</span></code></pre><h4 id="AMD-x2F-ATI-显卡"><a href="#AMD-x2F-ATI-显卡" class="headerlink" title="AMD &#x2F; ATI 显卡"></a>AMD &#x2F; ATI 显卡</h4><h5 id="开源驱动-1"><a href="#开源驱动-1" class="headerlink" title="开源驱动"></a>开源驱动</h5><table><thead><tr><th>架构</th><th>驱动</th><th>OpenGL</th><th>32 位 OpenGL</th><th>Vulkan</th><th>32 位 Vulkan</th></tr></thead><tbody><tr><td>RDNA, RDNA 2, GCN 1, GCN 2, GCN 3, GCN 4, GCN 5</td><td>xf86-video-amdgpu</td><td>mesa</td><td>lib32-mesa</td><td>amdvlk</td><td>lib32-amdvlk</td></tr><tr><td>GCN 1, GCN 2, TeraScale 或更老</td><td>xf86-video-ati</td><td>mesa</td><td>lib32-mesa</td><td>vulkan-radeon</td><td>lib32-vulkan-radeon</td></tr></tbody></table><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S opencl-mesa  <span class="token comment"># OpenCL 支持</span></code></pre><h5 id="闭源驱动"><a href="#闭源驱动" class="headerlink" title="闭源驱动"></a>闭源驱动</h5><p>AMD 闭源驱动仅支持 <code>RDNA</code>, <code>RDNA 2</code>, <code>GCN 3</code>, <code>GCN 4</code>, <code>GCN 5</code> 架构的显卡</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S xf86-video-amdgpu <span class="token comment"># 驱动本体</span>paru -S amdgpu-pro-libgl  <span class="token comment"># OpenGL 支持</span>paru -S opencl-amd  <span class="token comment"># OpenCL 支持</span>paru -S vulkan-amdgpu-pro <span class="token comment"># Vulkan 支持</span></code></pre><h4 id="其他显卡"><a href="#其他显卡" class="headerlink" title="其他显卡"></a>其他显卡</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S xorg-drivers<span class="token function">sudo</span> pacman -S mesa <span class="token comment"># OpenGL 支持</span><span class="token function">sudo</span> pacman -S lib32-mesa <span class="token comment"># 32 位 OpenGL 支持</span><span class="token function">sudo</span> pacman -S pocl <span class="token comment"># OpenCL 支持</span></code></pre><h3 id="DE-x2F-WM"><a href="#DE-x2F-WM" class="headerlink" title="DE &#x2F; WM"></a>DE &#x2F; WM</h3><table><thead><tr><th>名称</th><th>官方预览图</th></tr></thead><tbody><tr><td><a href="#kde-plasma">KDE Plasma</a></td><td><img src="https://kde.org/content/plasma-desktop/plasma-widgets.png" alt="KDE Plasma" loading="lazy"></td></tr><tr><td><a href="#gnome">GNOME</a></td><td><img src="https://www.gnome.org/wp-content/uploads/2021/03/wgo-splash-40.png" alt="GNOME" loading="lazy"></td></tr><tr><td><a href="#xfce">Xfce 4</a></td><td><img src="https://cdn.xfce.org/about/screenshots/4.16-1.png" alt="Xfce 4" loading="lazy"></td></tr><tr><td><a href="#dde">DDE</a></td><td><img src="https://distrowatch.com/images/ktyxqzobhgijab/deepin.png" alt="DDE" loading="lazy"></td></tr></tbody></table><h4 id="KDE-Plasma"><a href="#KDE-Plasma" class="headerlink" title="KDE Plasma"></a>KDE Plasma</h4><p>推荐与 <a href="#sddm">SDDM</a> 配合使用</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S plasma kde-applications</code></pre><p><code>kde-applications</code> 是可选的，其中包含 KDE 的其他应用</p><h4 id="GNOME"><a href="#GNOME" class="headerlink" title="GNOME"></a>GNOME</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S gnome gnome-extra</code></pre><p><code>gnome-extra</code> 是可选的，其中包含 GNOME 的其他应用</p><h4 id="XFCE"><a href="#XFCE" class="headerlink" title="XFCE"></a>XFCE</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S xfce4 xfce4-goodies</code></pre><p><code>xfce4-goodies</code> 是可选的，其中包含 XFCE 的其他应用</p><h4 id="DDE"><a href="#DDE" class="headerlink" title="DDE"></a>DDE</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S deepin deepin-extra</code></pre><p><code>deepin-extra</code> 是可选的，其中包含 deepin 的其他应用</p><h3 id="图形化登录管理器"><a href="#图形化登录管理器" class="headerlink" title="图形化登录管理器"></a>图形化登录管理器</h3><h4 id="SDDM"><a href="#SDDM" class="headerlink" title="SDDM"></a>SDDM</h4><p>推荐与 <a href="#kde-plasma">KDE Plasma</a> 配合使用</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S sddm<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> sddm</code></pre><h4 id="GDM"><a href="#GDM" class="headerlink" title="GDM"></a>GDM</h4><p>推荐与 <a href="#gnome">GNOME</a> 配合使用</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S gdm<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> gdm</code></pre><h4 id="LXDM"><a href="#LXDM" class="headerlink" title="LXDM"></a>LXDM</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S lxdm<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> lxdm</code></pre><h4 id="LightDM"><a href="#LightDM" class="headerlink" title="LightDM"></a>LightDM</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S lightdm<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> lightdm</code></pre><h1 id="常用工具-x2F-软件"><a href="#常用工具-x2F-软件" class="headerlink" title="常用工具 &#x2F; 软件"></a>常用工具 &#x2F; 软件</h1><div class="info"><blockquote><p>带有 <sup>AUR</sup> 上标的软件包是来自 AUR 的，需要使用 <a href="#aur-tools">AUR Tool</a> 安装</p></blockquote></div><h2 id="AUR-Tools"><a href="#AUR-Tools" class="headerlink" title="AUR Tools"></a>AUR Tools</h2><p>用于安装来自 AUR 的软件包的工具</p><p>推荐 <code>paru</code> 和 <code>yay</code></p><p>paru:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://aur.archlinux.org/paru.git<span class="token builtin class-name">cd</span> parumakepkg -si<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span><span class="token function">rm</span> -rf paru</code></pre><p>yay:</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://aur.archlinux.org/yay.git<span class="token builtin class-name">cd</span> <span class="token function">git</span>makepkg -si<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span><span class="token function">rm</span> -rf yay</code></pre><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><table><thead><tr><th>名称</th><th>包名</th><th>备注</th></tr></thead><tbody><tr><td><a href="https://www.chromium.org/">Chromium</a></td><td><code>chromium</code></td><td></td></tr><tr><td><a href="https://www.mozilla.org/zh-CN/firefox/">Firefox</a></td><td><code>firefox</code></td><td>全局菜单需要安装 <code>firefox-appmenu</code><sup>AUR</sup></td></tr><tr><td><a href="https://google.com/chrome">Google Chrome</a></td><td><code>google-chrome</code><sup>AUR</sup></td><td></td></tr><tr><td><a href="https://microsoft.com/edge">Microsoft Edge</a></td><td><code>microsoft-edge-stable-bin</code><sup>AUR</sup></td><td></td></tr></tbody></table><h2 id="文本编辑器-x2F-IDE"><a href="#文本编辑器-x2F-IDE" class="headerlink" title="文本编辑器 &#x2F; IDE"></a>文本编辑器 &#x2F; IDE</h2><table><thead><tr><th>名称</th><th>包名</th></tr></thead><tbody><tr><td><a href="https://code.visualstudio.com/">Visual Studio Code</a></td><td><code>visual-studio-code-bin</code><sup>AUR</sup></td></tr><tr><td><a href="https://www.jetbrains.com/idea/">IntelliJ IDEA Community Edition</a></td><td><code>intellij-idea-community-edition</code></td></tr><tr><td><a href="https://www.jetbrains.com/idea/">IntelliJ IDEA Ultimate Edition</a></td><td><code>intellij-idea-ultimate-edition</code><sup>AUR</sup></td></tr><tr><td><a href="https://www.jetbrains.com/pycharm/">PyCharm Community Edition</a></td><td><code>pycharm-community-edition</code></td></tr><tr><td><a href="https://www.jetbrains.com/pycharm/">PyCharm Professional</a></td><td><code>pycharm-professional</code><sup>AUR</sup></td></tr></tbody></table><h2 id="办公套件"><a href="#办公套件" class="headerlink" title="办公套件"></a>办公套件</h2><table><thead><tr><th>名称</th><th>包名</th></tr></thead><tbody><tr><td>LibreOffice</td><td><code>libreoffice-fresh</code></td></tr><tr><td>WPS Office</td><td><code>wps-office-cn</code><sup>AUR</sup></td></tr></tbody></table><p><img src="/images/stickers/touch-fish.jpg" alt="又摸了一天好累哦" loading="lazy"><em><strong>Working in progress…</strong></em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Arch" scheme="https://chitang.tech/tags/Arch/"/>
    
    <category term="Linux" scheme="https://chitang.tech/tags/Linux/"/>
    
    <category term="Guide" scheme="https://chitang.tech/tags/Guide/"/>
    
  </entry>
  
  <entry>
    <title>Howdy - Linux 的人脸识别</title>
    <link href="https://chitang.tech/posts/howdy/"/>
    <id>https://chitang.tech/posts/howdy/</id>
    <published>2020-10-02T11:49:33.000Z</published>
    <updated>2022-06-18T03:21:26.591Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言的前言"><a href="#前言的前言" class="headerlink" title="前言的前言"></a>前言的前言</h1><p>嗨呀好久没更新了呢</p><p>时逢 8 天长假</p><p>懒得更视频就先来更个博客好了</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这几天逛 Github 的时候看到了个有意思的东西: <a href="https://github.com/boltgolt/howdy">Howdy</a></p><p><img src="https://s1.ax1x.com/2020/10/02/0lWMAf.png" alt="Howdy on Github" loading="lazy"></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>README 里的介绍是这样的: </p><blockquote><p>Howdy provides Windows Hello™ style authentication for Linux. Use your built-in IR emitters and camera in combination with facial recognition to prove who you are.</p><p>Using the central authentication system (PAM), this works everywhere you would otherwise need your password: Login, lock screen, sudo, su, etc.</p></blockquote><p>翻译过来大概是这个意思:</p><blockquote><p>Howdy 为 Linux 提供了 Windows Hello™ 风格的认证。使用内置的红外发射器和摄像头，结合面部识别来证明你是谁。</p><p>使用中央认证系统（PAM），这意味着在任何需要密码的地方都可以使用 Howdy。包括登录、锁屏、<code>sudo</code>、<code>su</code>等。</p></blockquote><p>虽说是需要红外发射器</p><p>但实际上并不需要红外发射器</p><p>整一个摄像头就可以有用了</p><p>红外发射器只是用于夜间使用</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><div class="warning"><blockquote><p>本教程似乎仅适用于 Arch Linux</p></blockquote></div><pre class="language-bash" data-language="bash"><code class="language-bash">yay -S howdy</code></pre><p>是的没错，Howdy 在 AUR 里面</p><p>所以可以直接通过 yay 进行安装</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="先前准备"><a href="#先前准备" class="headerlink" title="先前准备"></a>先前准备</h2><h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h3><p>既然是人脸识别</p><p>那肯定需要用到摄像头</p><p>去 tb 随便找个 30 包邮 USB 摄像头就能用</p><p>如果你想要夜间认证那可以选择红外摄像头</p><h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><h4 id="检测摄像头设备"><a href="#检测摄像头设备" class="headerlink" title="检测摄像头设备"></a>检测摄像头设备</h4><p>请确保摄像头正常工作</p><p>可以使用 <code>Cheese</code> <code>VLC</code> 等应用访问摄像头查看工作状况</p><p>如果确保摄像头工作正常</p><p>那可以确认摄像头的设备名</p><p>我这里使用 <code>v4l2-ctl</code> 进行确认</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S v4l-utils<span class="token comment">#没有 v4l-utils 先安装</span>v4l2-ctl --list-devices<span class="token comment">#列出所有的摄像头设备</span></code></pre><p><img src="https://s1.ax1x.com/2020/10/03/0337FK.png" loading="lazy"></p><p>如果有多个摄像头设备以 <code>/dev/video0</code> 为准</p><h4 id="修改-howdy-config"><a href="#修改-howdy-config" class="headerlink" title="修改 howdy config"></a>修改 howdy config</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> howdy -U <span class="token operator">&lt;</span>username<span class="token operator">></span> config<span class="token comment">#将&lt;username>更改为你的用户名，以下都这么用</span></code></pre><p>默认会使用 <code>nano</code> 打开 <code>config.ini</code></p><p><img src="https://s1.ax1x.com/2020/10/03/03841g.png" alt="sudo howdy -U chitang config" loading="lazy"></p><p>你可以在这里面修改一些设置</p><p>所有选项都用注释来说明作用了</p><p>我们主要找的这个</p><p><img src="https://s1.ax1x.com/2020/10/03/038j9U.png" loading="lazy"></p><p>将 <code>device_path = </code> 后面的内容更改成你的摄像头设备地址</p><h4 id="增加面部"><a href="#增加面部" class="headerlink" title="增加面部"></a>增加面部</h4><p>通过以下命令即可将面部注册到 Howdy 中</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> howdy -U <span class="token operator">&lt;</span>username<span class="token operator">></span> <span class="token function">add</span></code></pre><p>在正式开始录入面部前会要求输入一个 25 字以内的名字</p><p>用于标记面部</p><p><img src="/images/howdy/face-add.png" alt="面部录入" loading="lazy"></p><h4 id="Howdy-用法"><a href="#Howdy-用法" class="headerlink" title="Howdy 用法"></a>Howdy 用法</h4><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>add</code></td><td>给一个用户增加一个新的面部模型</td></tr><tr><td><code>clear</code></td><td>给一个用户删除所有的面部模型</td></tr><tr><td><code>config</code></td><td>在你的默认编辑器中打开配置文件</td></tr><tr><td><code>disable</code></td><td>禁用或启用 Howdy</td></tr><tr><td><code>list</code></td><td>列出一个用户的所有面部</td></tr><tr><td><code>remove</code></td><td>给一个用户移除选定的面部</td></tr><tr><td><code>snapshot</code></td><td>给你的摄像头整个截图</td></tr><tr><td><code>test</code></td><td>测试摄像头</td></tr><tr><td><code>version</code></td><td>输出当前版本号</td></tr></tbody></table><h2 id="使-Howdy-能够用于-sudo-的认证"><a href="#使-Howdy-能够用于-sudo-的认证" class="headerlink" title="使 Howdy 能够用于 sudo 的认证"></a>使 Howdy 能够用于 sudo 的认证</h2><p>刚才说过了，Howdy 使用 PAM 认证系统</p><p>所以我们现在得去设置 PAM</p><p>更改 <code>/etc/pam.d/sudo</code> 中的文件</p><p>在它的第一行加上这么一句</p><pre class="language-none"><code class="language-none">authsufficientpam_python.so&#x2F;lib&#x2F;security&#x2F;howdy&#x2F;pam.py</code></pre><p><img src="/images/howdy/config.png" alt="我的 /etc/pam.d/sudo" loading="lazy"></p><p>接着最好重启下电脑</p><p>尝试一下再用 sudo 干点事</p><p><img src="/images/howdy/use.png" alt="芜湖起飞" loading="lazy"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://chitang.tech/tags/Linux/"/>
    
    <category term="Guide" scheme="https://chitang.tech/tags/Guide/"/>
    
  </entry>
  
  <entry>
    <title>Hello, World!</title>
    <link href="https://chitang.tech/posts/first-blog/"/>
    <id>https://chitang.tech/posts/first-blog/</id>
    <published>2020-06-25T12:49:30.000Z</published>
    <updated>2022-06-18T03:21:26.591Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
</feed>
